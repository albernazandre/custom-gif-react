{"ast":null,"code":"var _jsxFileName = \"/home/andre/Documentos/projetos autonomos/Projetos-em-React/project-gif-custom-hooks/src/components/Tag_V1.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\n// axios facilita a requisicao fetch\nimport axios from \"axios\";\n\n// API_KEY = capturando a chave que vai ser passada no fetch\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_KEY = process.env.REACT_APP_API_KEY;\nconst Tag = () => {\n  _s();\n  // vamos selecionar uma tag do gif que queremos (ex: cat gifs)\n  const [tag, setTag] = useState('dogs');\n  // o gif sera a url do gif\n  const [gif, setGif] = useState('');\n  const fetchGif = async tag => {\n    const url = `https://api.giphy.com/v1/gifs/random?api_key=${API_KEY}§tag=${tag}`;\n    const {\n      data\n    } = await axios.get(url); // promise...\n    // capturando a url do gif\n    const imageSrc = data.data.images.downsized_large.url;\n    setGif(imageSrc);\n  };\n\n  // Se o array é deixado vazio, entao a funcao useEffect funciona como\n  // um component did mount, o que quer dizer que so acontece\n  // inicialmente na primeira renderizacao\n  useEffect(() => {\n    fetchGif();\n  }, []);\n  const handleClick = () => {\n    fetchGif();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\"Random \", tag, \" Gif\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"img\", {\n      width: \"500\",\n      src: gif,\n      alt: \"Random Gif\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      value: tag,\n      onChange: event => setTag(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"CLICK FOR NEW GIF\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 9\n  }, this);\n};\n_s(Tag, \"x7JGwKIk40InkWjGcjFi/s8w5fs=\");\n_c = Tag;\nexport default Tag;\nvar _c;\n$RefreshReg$(_c, \"Tag\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","API_KEY","process","env","REACT_APP_API_KEY","Tag","_s","tag","setTag","gif","setGif","fetchGif","url","data","get","imageSrc","images","downsized_large","handleClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","width","src","alt","value","onChange","event","target","onClick","_c","$RefreshReg$"],"sources":["/home/andre/Documentos/projetos autonomos/Projetos-em-React/project-gif-custom-hooks/src/components/Tag_V1.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\n// axios facilita a requisicao fetch\nimport axios from \"axios\";\n\n// API_KEY = capturando a chave que vai ser passada no fetch\nconst API_KEY = process.env.REACT_APP_API_KEY;\n\nconst Tag = () => {\n    // vamos selecionar uma tag do gif que queremos (ex: cat gifs)\n    const [tag, setTag] = useState('dogs');\n    // o gif sera a url do gif\n    const [gif, setGif] = useState('');\n\n    const fetchGif = async (tag) => {\n        const url = `https://api.giphy.com/v1/gifs/random?api_key=${API_KEY}§tag=${tag}`;\n      \n        const { data } = await axios.get(url); // promise...\n        // capturando a url do gif\n        const imageSrc = data.data.images.downsized_large.url;\n\n        setGif(imageSrc);\n    }\n\n    // Se o array é deixado vazio, entao a funcao useEffect funciona como\n    // um component did mount, o que quer dizer que so acontece\n    // inicialmente na primeira renderizacao\n    useEffect(() => {\n      fetchGif();    \n    }, []);\n\n    const handleClick = () => {\n        fetchGif();\n    }\n\n    return (\n        <div className=\"container\">\n          <h1>Random {tag} Gif</h1>\n          <img width=\"500\" src={gif} alt='Random Gif' />\n          <input \n            value={tag} \n            onChange={(event) => setTag(event.target.value)} />\n          <button onClick={handleClick}>CLICK FOR NEW GIF</button>\n        </div>\n    );\n}\n\nexport default Tag;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD;AACA,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB;AAE7C,MAAMC,GAAG,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACd;EACA,MAAM,CAACC,GAAG,EAAEC,MAAM,CAAC,GAAGZ,QAAQ,CAAC,MAAM,CAAC;EACtC;EACA,MAAM,CAACa,GAAG,EAAEC,MAAM,CAAC,GAAGd,QAAQ,CAAC,EAAE,CAAC;EAElC,MAAMe,QAAQ,GAAG,MAAOJ,GAAG,IAAK;IAC5B,MAAMK,GAAG,GAAI,gDAA+CX,OAAQ,QAAOM,GAAI,EAAC;IAEhF,MAAM;MAAEM;IAAK,CAAC,GAAG,MAAMf,KAAK,CAACgB,GAAG,CAACF,GAAG,CAAC,CAAC,CAAC;IACvC;IACA,MAAMG,QAAQ,GAAGF,IAAI,CAACA,IAAI,CAACG,MAAM,CAACC,eAAe,CAACL,GAAG;IAErDF,MAAM,CAACK,QAAQ,CAAC;EACpB,CAAC;;EAED;EACA;EACA;EACAlB,SAAS,CAAC,MAAM;IACdc,QAAQ,EAAE;EACZ,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,WAAW,GAAGA,CAAA,KAAM;IACtBP,QAAQ,EAAE;EACd,CAAC;EAED,oBACIX,OAAA;IAAKmB,SAAS,EAAC,WAAW;IAAAC,QAAA,gBACxBpB,OAAA;MAAAoB,QAAA,GAAI,SAAO,EAACb,GAAG,EAAC,MAAI;IAAA;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAK,eACzBxB,OAAA;MAAKyB,KAAK,EAAC,KAAK;MAACC,GAAG,EAAEjB,GAAI;MAACkB,GAAG,EAAC;IAAY;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eAC9CxB,OAAA;MACE4B,KAAK,EAAErB,GAAI;MACXsB,QAAQ,EAAGC,KAAK,IAAKtB,MAAM,CAACsB,KAAK,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAP,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAG,eACrDxB,OAAA;MAAQgC,OAAO,EAAEd,WAAY;MAAAE,QAAA,EAAC;IAAiB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAAS;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACpD;AAEd,CAAC;AAAAlB,EAAA,CArCKD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AAuCT,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}